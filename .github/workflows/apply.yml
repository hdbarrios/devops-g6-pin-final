name: Terraform Apply
on: 
  push:
    branches: 
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
    branches:
      - master

jobs:
  terraform_apply:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east-1'
      TERRAFORM_VERSION: "1.10.2"

    steps:
    - uses: actions/checkout@v4
      with:
          ref: ${{ github.event.pull_request.head.sha }} # se refiere al commit más reciente del branch de origen del PR (es decir, el branch desde el cual se hizo el pull request).
            # ref: ${{ github.sha }} # github.sha hace referencia al commit hash del evento actual, que es el commit específico que activó el workflow. En el caso de un push o un pull_request, este es el commit que causó que el workflow se ejecutara.
          submodules: true
          fetch-depth: 1

    - name: Install Terraform
      run: |
       tf_version=$TERRAFORM_VERSION
       wget https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
       unzip terraform_"$tf_version"_linux_amd64.zip
       sudo mv terraform /usr/local/bin/

    - name: Verify Terraform version
      run: |
       terraform version

    - name: Terraform init
      run: |
       terraform init -input=false

    - name: Terraform validation
      run: |
       terraform validate

    - name: Terraform plan
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      run: |
       terraform plan -var-file=profiles/pinf.tfvars 

    - name: Terraform apply
      if: github.event_name == 'push'  # Solo en push a master (es decir, cuando el PR se mergea)
      run: |
       terraform apply -var-file=profiles/pinf.tfvars -auto-approve -input=false
       
  validacion_infra:
    runs-on: ubuntu-latest
    needs: terraform_apply  # Este job depende del éxito del job "terraform_apply"
    if: github.event_name == 'push'  # Este job solo se ejecuta en eventos de push
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east-1'
      TERRAFORM_VERSION: "1.10.2"

    steps:
    - uses: actions/checkout@v4
      with:
          ref: ${{ github.event.pull_request.head.sha }} # se refiere al commit más reciente del branch de origen del PR (es decir, el branch desde el cual se hizo el pull request).
            # ref: ${{ github.sha }} # github.sha hace referencia al commit hash del evento actual, que es el commit específico que activó el workflow. En el caso de un push o un pull_request, este es el commit que causó que el workflow se ejecutara.
          submodules: true
          fetch-depth: 1

    - name: Install kubectl
      run: |
       curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
       sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

    - name: Install Helm
      run: |
       curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Install AWS CLI
      run: |
       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
       unzip awscliv2.zip
       sudo ./aws/install --update

    - name: Verificando el cluster EKS
      run: |
       aws eks update-kubeconfig --name mundos-e --region us-east-1
       aws ec2 describe-instances --query "Reservations[*].Instances[*].[InstanceId, InstanceType, State.Name, PublicIpAddress, PrivateIpAddress]" --output table
       aws eks describe-cluster --name mundos-e --region us-east-1 --query "cluster.accessConfig"

       echo "EKS Nodes:"
       kubectl get nodes -o wide
       
       echo "Install helms charts:"
       helm repo add bitnami https://charts.bitnami.com/bitnami
       helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
       helm repo add grafana https://grafana.github.io/helm-charts
       helm repo update
       
       echo "Install Nginx WebServer"
       helm upgrade --install nginx-webserver \
         oci://registry-1.docker.io/bitnamicharts/nginx \
         --namespace mundose \
         --create-namespace \
         --values profiles/nginx-values.yaml
       
       kubectl -n mundose get pods
       kubectl -n mundose get svc

       echo "Install Prometheus"
       helm upgrade --install prometheus prometheus-community/prometheus \
         --namespace prometheus \
         --create-namespace \
         --values profiles/prometheus-values.yaml
       
       echo "Install Grafana"
       helm upgrade --install grafana grafana/grafana \
         --namespace grafana \
         --create-namespace \
         --values profiles/grafana-values.yaml
       
       sleep 10

       echo "List SVC: "
       kubectl get svc -n mundose
       kubectl get svc -n grafana
       kubectl get svc -n prometheus

       echo "List PV:"
       kubectl get pv 
     
    - name: Port-forward prometheus-service
      run: |
       RUNNER_IP=$(curl -s ifconfig.me)
       echo "Puedes acceder a Prometheus en: http://$RUNNER_IP:8080"

       # Ejecutar el port-forward en segundo plano
       kubectl port-forward -n prometheus deploy/prometheus-server 8080:9090 --address 0.0.0.0 &
       PORT_FORWARD_PID=$!  # Capturar el PID del proceso en segundo plano
      
       # Esperar 1 minutos (60 segundos)
       sleep 60
      
       # Detener el port-forward después de 5 minutos
       kill $PORT_FORWARD_PID
       echo "Port-forward detenido después de 5 minutos."
